// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_40_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_buf_4_address0,
        data_buf_4_ce0,
        data_buf_4_we0,
        data_buf_4_d0,
        data_buf_4_address1,
        data_buf_4_ce1,
        data_buf_4_q1,
        data_buf_3_address0,
        data_buf_3_ce0,
        data_buf_3_we0,
        data_buf_3_d0,
        data_buf_3_address1,
        data_buf_3_ce1,
        data_buf_3_q1,
        data_buf_2_address0,
        data_buf_2_ce0,
        data_buf_2_we0,
        data_buf_2_d0,
        data_buf_2_address1,
        data_buf_2_ce1,
        data_buf_2_q1,
        data_buf_1_address0,
        data_buf_1_ce0,
        data_buf_1_we0,
        data_buf_1_d0,
        data_buf_1_address1,
        data_buf_1_ce1,
        data_buf_1_q1,
        data_buf_address0,
        data_buf_ce0,
        data_buf_we0,
        data_buf_d0,
        data_buf_address1,
        data_buf_ce1,
        data_buf_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_buf_4_address0;
output   data_buf_4_ce0;
output   data_buf_4_we0;
output  [15:0] data_buf_4_d0;
output  [3:0] data_buf_4_address1;
output   data_buf_4_ce1;
input  [15:0] data_buf_4_q1;
output  [3:0] data_buf_3_address0;
output   data_buf_3_ce0;
output   data_buf_3_we0;
output  [15:0] data_buf_3_d0;
output  [3:0] data_buf_3_address1;
output   data_buf_3_ce1;
input  [15:0] data_buf_3_q1;
output  [3:0] data_buf_2_address0;
output   data_buf_2_ce0;
output   data_buf_2_we0;
output  [15:0] data_buf_2_d0;
output  [3:0] data_buf_2_address1;
output   data_buf_2_ce1;
input  [15:0] data_buf_2_q1;
output  [3:0] data_buf_1_address0;
output   data_buf_1_ce0;
output   data_buf_1_we0;
output  [15:0] data_buf_1_d0;
output  [3:0] data_buf_1_address1;
output   data_buf_1_ce1;
input  [15:0] data_buf_1_q1;
output  [3:0] data_buf_address0;
output   data_buf_ce0;
output   data_buf_we0;
output  [15:0] data_buf_d0;
output  [3:0] data_buf_address1;
output   data_buf_ce1;
input  [15:0] data_buf_q1;

reg ap_idle;
reg data_buf_4_ce0;
reg data_buf_4_we0;
reg data_buf_4_ce1;
reg data_buf_3_ce0;
reg data_buf_3_we0;
reg data_buf_3_ce1;
reg data_buf_2_ce0;
reg data_buf_2_we0;
reg data_buf_2_ce1;
reg data_buf_1_ce0;
reg data_buf_1_we0;
reg data_buf_1_ce1;
reg data_buf_ce0;
reg data_buf_we0;
reg data_buf_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_194_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] trunc_ln40_fu_234_p1;
reg   [2:0] trunc_ln40_reg_385;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] data_buf_addr_reg_390;
reg   [3:0] data_buf_1_addr_reg_396;
reg   [3:0] data_buf_2_addr_reg_402;
reg   [3:0] data_buf_3_addr_reg_408;
reg   [3:0] data_buf_4_addr_reg_414;
wire   [63:0] zext_ln40_fu_225_p1;
wire    ap_block_pp0_stage0;
reg   [5:0] phi_urem_fu_76;
wire   [5:0] select_ln40_fu_250_p3;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_phi_urem_load;
reg   [12:0] phi_mul_fu_80;
wire   [12:0] add_ln40_1_fu_209_p2;
reg   [12:0] ap_sig_allocacmp_phi_mul_load;
reg   [5:0] i_1_fu_84;
wire   [5:0] add_ln40_fu_200_p2;
reg   [5:0] ap_sig_allocacmp_i;
wire   [15:0] select_ln41_fu_348_p3;
wire   [3:0] tmp_fu_215_p4;
wire   [5:0] add_ln40_2_fu_238_p2;
wire   [0:0] icmp_ln40_1_fu_244_p2;
wire   [15:0] tmp_s_fu_273_p11;
wire  signed [15:0] tmp_s_fu_273_p13;
wire  signed [16:0] sext_ln41_fu_300_p1;
wire   [16:0] sub_ln41_fu_312_p2;
wire   [14:0] trunc_ln41_2_fu_328_p4;
wire   [15:0] trunc_ln41_1_fu_318_p4;
wire   [0:0] tmp_1_fu_304_p3;
wire   [15:0] sub_ln41_1_fu_342_p2;
wire  signed [15:0] sext_ln41_1_fu_338_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [2:0] tmp_s_fu_273_p1;
wire   [2:0] tmp_s_fu_273_p3;
wire   [2:0] tmp_s_fu_273_p5;
wire   [2:0] tmp_s_fu_273_p7;
wire  signed [2:0] tmp_s_fu_273_p9;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 phi_urem_fu_76 = 6'd0;
#0 phi_mul_fu_80 = 13'd0;
#0 i_1_fu_84 = 6'd0;
#0 ap_done_reg = 1'b0;
end

mem_streaming_sparsemux_11_3_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
sparsemux_11_3_16_1_1_U8(
    .din0(data_buf_q1),
    .din1(data_buf_1_q1),
    .din2(data_buf_2_q1),
    .din3(data_buf_3_q1),
    .din4(data_buf_4_q1),
    .def(tmp_s_fu_273_p11),
    .sel(trunc_ln40_reg_385),
    .dout(tmp_s_fu_273_p13)
);

mem_streaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_84 <= add_ln40_fu_200_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_84 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_mul_fu_80 <= add_ln40_1_fu_209_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_80 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_urem_fu_76 <= select_ln40_fu_250_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_urem_fu_76 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_1_addr_reg_396 <= zext_ln40_fu_225_p1;
        data_buf_2_addr_reg_402 <= zext_ln40_fu_225_p1;
        data_buf_3_addr_reg_408 <= zext_ln40_fu_225_p1;
        data_buf_4_addr_reg_414 <= zext_ln40_fu_225_p1;
        data_buf_addr_reg_390 <= zext_ln40_fu_225_p1;
        trunc_ln40_reg_385 <= trunc_ln40_fu_234_p1;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_mul_load = 13'd0;
    end else begin
        ap_sig_allocacmp_phi_mul_load = phi_mul_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_urem_load = 6'd0;
    end else begin
        ap_sig_allocacmp_phi_urem_load = phi_urem_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_1_ce0 = 1'b1;
    end else begin
        data_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_1_ce1 = 1'b1;
    end else begin
        data_buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln40_reg_385 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_1_we0 = 1'b1;
    end else begin
        data_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_2_ce0 = 1'b1;
    end else begin
        data_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_2_ce1 = 1'b1;
    end else begin
        data_buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln40_reg_385 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_2_we0 = 1'b1;
    end else begin
        data_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_3_ce0 = 1'b1;
    end else begin
        data_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_3_ce1 = 1'b1;
    end else begin
        data_buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln40_reg_385 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_3_we0 = 1'b1;
    end else begin
        data_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_4_ce0 = 1'b1;
    end else begin
        data_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_4_ce1 = 1'b1;
    end else begin
        data_buf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln40_reg_385 == 3'd3) & ~(trunc_ln40_reg_385 == 3'd2) & ~(trunc_ln40_reg_385 == 3'd1) & ~(trunc_ln40_reg_385 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_4_we0 = 1'b1;
    end else begin
        data_buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_ce0 = 1'b1;
    end else begin
        data_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_ce1 = 1'b1;
    end else begin
        data_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln40_reg_385 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_buf_we0 = 1'b1;
    end else begin
        data_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_209_p2 = (ap_sig_allocacmp_phi_mul_load + 13'd103);

assign add_ln40_2_fu_238_p2 = (ap_sig_allocacmp_phi_urem_load + 6'd1);

assign add_ln40_fu_200_p2 = (ap_sig_allocacmp_i + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_buf_1_address0 = data_buf_1_addr_reg_396;

assign data_buf_1_address1 = zext_ln40_fu_225_p1;

assign data_buf_1_d0 = select_ln41_fu_348_p3;

assign data_buf_2_address0 = data_buf_2_addr_reg_402;

assign data_buf_2_address1 = zext_ln40_fu_225_p1;

assign data_buf_2_d0 = select_ln41_fu_348_p3;

assign data_buf_3_address0 = data_buf_3_addr_reg_408;

assign data_buf_3_address1 = zext_ln40_fu_225_p1;

assign data_buf_3_d0 = select_ln41_fu_348_p3;

assign data_buf_4_address0 = data_buf_4_addr_reg_414;

assign data_buf_4_address1 = zext_ln40_fu_225_p1;

assign data_buf_4_d0 = select_ln41_fu_348_p3;

assign data_buf_address0 = data_buf_addr_reg_390;

assign data_buf_address1 = zext_ln40_fu_225_p1;

assign data_buf_d0 = select_ln41_fu_348_p3;

assign icmp_ln40_1_fu_244_p2 = ((add_ln40_2_fu_238_p2 < 6'd5) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_194_p2 = ((ap_sig_allocacmp_i == 6'd50) ? 1'b1 : 1'b0);

assign select_ln40_fu_250_p3 = ((icmp_ln40_1_fu_244_p2[0:0] == 1'b1) ? add_ln40_2_fu_238_p2 : 6'd0);

assign select_ln41_fu_348_p3 = ((tmp_1_fu_304_p3[0:0] == 1'b1) ? sub_ln41_1_fu_342_p2 : sext_ln41_1_fu_338_p1);

assign sext_ln41_1_fu_338_p1 = $signed(trunc_ln41_2_fu_328_p4);

assign sext_ln41_fu_300_p1 = tmp_s_fu_273_p13;

assign sub_ln41_1_fu_342_p2 = (16'd0 - trunc_ln41_1_fu_318_p4);

assign sub_ln41_fu_312_p2 = ($signed(17'd0) - $signed(sext_ln41_fu_300_p1));

assign tmp_1_fu_304_p3 = tmp_s_fu_273_p13[32'd15];

assign tmp_fu_215_p4 = {{ap_sig_allocacmp_phi_mul_load[12:9]}};

assign tmp_s_fu_273_p11 = 'bx;

assign trunc_ln40_fu_234_p1 = ap_sig_allocacmp_phi_urem_load[2:0];

assign trunc_ln41_1_fu_318_p4 = {{sub_ln41_fu_312_p2[16:1]}};

assign trunc_ln41_2_fu_328_p4 = {{tmp_s_fu_273_p13[15:1]}};

assign zext_ln40_fu_225_p1 = tmp_fu_215_p4;

endmodule //mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_40_1
