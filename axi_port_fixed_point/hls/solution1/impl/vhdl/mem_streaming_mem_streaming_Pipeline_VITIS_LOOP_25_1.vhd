-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_25_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_out_r_AWVALID : OUT STD_LOGIC;
    m_axi_out_r_AWREADY : IN STD_LOGIC;
    m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WVALID : OUT STD_LOGIC;
    m_axi_out_r_WREADY : IN STD_LOGIC;
    m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_WLAST : OUT STD_LOGIC;
    m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARVALID : OUT STD_LOGIC;
    m_axi_out_r_ARREADY : IN STD_LOGIC;
    m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RVALID : IN STD_LOGIC;
    m_axi_out_r_RREADY : OUT STD_LOGIC;
    m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_out_r_RLAST : IN STD_LOGIC;
    m_axi_out_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BVALID : IN STD_LOGIC;
    m_axi_out_r_BREADY : OUT STD_LOGIC;
    m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln25 : IN STD_LOGIC_VECTOR (58 downto 0);
    data_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_ce0 : OUT STD_LOGIC;
    data_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_ce1 : OUT STD_LOGIC;
    data_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_1_ce0 : OUT STD_LOGIC;
    data_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_1_ce1 : OUT STD_LOGIC;
    data_buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_2_ce0 : OUT STD_LOGIC;
    data_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_2_ce1 : OUT STD_LOGIC;
    data_buf_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_3_ce0 : OUT STD_LOGIC;
    data_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_3_ce1 : OUT STD_LOGIC;
    data_buf_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_4_ce0 : OUT STD_LOGIC;
    data_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_buf_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_4_ce1 : OUT STD_LOGIC;
    data_buf_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_25_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011111111111111111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln25_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_r_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_fu_308_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_reg_497 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_1_load_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_2_load_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_3_load_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_4_load_reg_517 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_load_1_reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_1_load_1_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_2_load_1_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_3_load_1_reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_4_load_1_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_2_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln25_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_271_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln30_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_1_fu_324_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_1_fu_327_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_2_fu_338_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_3_fu_349_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_4_fu_360_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_5_fu_371_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_6_fu_382_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_7_fu_393_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_8_fu_404_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal data_9_fu_415_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mem_streaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mem_streaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln25_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_104 <= add_ln25_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                data_reg_497 <= data_fu_308_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_buf_1_load_1_reg_527 <= data_buf_1_q0;
                data_buf_1_load_reg_502 <= data_buf_1_q1;
                data_buf_2_load_1_reg_532 <= data_buf_2_q0;
                data_buf_2_load_reg_507 <= data_buf_2_q1;
                data_buf_3_load_1_reg_537 <= data_buf_3_q0;
                data_buf_3_load_reg_512 <= data_buf_3_q1;
                data_buf_4_load_1_reg_542 <= data_buf_4_q0;
                data_buf_4_load_reg_517 <= data_buf_4_q1;
                data_buf_load_1_reg_522 <= data_buf_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln25_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_out_r_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_out_r_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_out_r_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_out_r_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln25_fu_259_p2)
    begin
        if (((icmp_ln25_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_104;
        end if; 
    end process;

    
    data_1_fu_327_p5_proc : process(zext_ln30_1_fu_324_p1, data_buf_1_load_reg_502)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 31 or i < 16) then
                data_1_fu_327_p5(i) <= zext_ln30_1_fu_324_p1(i);
            elsif (31 - i >= 16) then
                data_1_fu_327_p5(i) <= '0';
            else
                data_1_fu_327_p5(i) <= data_buf_1_load_reg_502(31 - i);
            end if;
        end loop;
    end process;

    
    data_2_fu_338_p5_proc : process(data_1_fu_327_p5, data_buf_2_load_reg_507)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 47 or i < 32) then
                data_2_fu_338_p5(i) <= data_1_fu_327_p5(i);
            elsif (47 - i >= 16) then
                data_2_fu_338_p5(i) <= '0';
            else
                data_2_fu_338_p5(i) <= data_buf_2_load_reg_507(47 - i);
            end if;
        end loop;
    end process;

    
    data_3_fu_349_p5_proc : process(data_2_fu_338_p5, data_buf_3_load_reg_512)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 63 or i < 48) then
                data_3_fu_349_p5(i) <= data_2_fu_338_p5(i);
            elsif (63 - i >= 16) then
                data_3_fu_349_p5(i) <= '0';
            else
                data_3_fu_349_p5(i) <= data_buf_3_load_reg_512(63 - i);
            end if;
        end loop;
    end process;

    
    data_4_fu_360_p5_proc : process(data_3_fu_349_p5, data_buf_4_load_reg_517)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 79 or i < 64) then
                data_4_fu_360_p5(i) <= data_3_fu_349_p5(i);
            elsif (79 - i >= 16) then
                data_4_fu_360_p5(i) <= '0';
            else
                data_4_fu_360_p5(i) <= data_buf_4_load_reg_517(79 - i);
            end if;
        end loop;
    end process;

    
    data_5_fu_371_p5_proc : process(data_4_fu_360_p5, data_buf_load_1_reg_522)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 95 or i < 80) then
                data_5_fu_371_p5(i) <= data_4_fu_360_p5(i);
            elsif (95 - i >= 16) then
                data_5_fu_371_p5(i) <= '0';
            else
                data_5_fu_371_p5(i) <= data_buf_load_1_reg_522(95 - i);
            end if;
        end loop;
    end process;

    
    data_6_fu_382_p5_proc : process(data_5_fu_371_p5, data_buf_1_load_1_reg_527)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 111 or i < 96) then
                data_6_fu_382_p5(i) <= data_5_fu_371_p5(i);
            elsif (111 - i >= 16) then
                data_6_fu_382_p5(i) <= '0';
            else
                data_6_fu_382_p5(i) <= data_buf_1_load_1_reg_527(111 - i);
            end if;
        end loop;
    end process;

    
    data_7_fu_393_p5_proc : process(data_6_fu_382_p5, data_buf_2_load_1_reg_532)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 127 or i < 112) then
                data_7_fu_393_p5(i) <= data_6_fu_382_p5(i);
            elsif (127 - i >= 16) then
                data_7_fu_393_p5(i) <= '0';
            else
                data_7_fu_393_p5(i) <= data_buf_2_load_1_reg_532(127 - i);
            end if;
        end loop;
    end process;

    
    data_8_fu_404_p5_proc : process(data_7_fu_393_p5, data_buf_3_load_1_reg_537)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 143 or i < 128) then
                data_8_fu_404_p5(i) <= data_7_fu_393_p5(i);
            elsif (143 - i >= 16) then
                data_8_fu_404_p5(i) <= '0';
            else
                data_8_fu_404_p5(i) <= data_buf_3_load_1_reg_537(143 - i);
            end if;
        end loop;
    end process;

    
    data_9_fu_415_p5_proc : process(data_8_fu_404_p5, data_buf_4_load_1_reg_542)
    begin
        for i in 160 - 1 downto 0 loop
            if (i > 159 or i < 144) then
                data_9_fu_415_p5(i) <= data_8_fu_404_p5(i);
            elsif (159 - i >= 16) then
                data_9_fu_415_p5(i) <= '0';
            else
                data_9_fu_415_p5(i) <= data_buf_4_load_1_reg_542(159 - i);
            end if;
        end loop;
    end process;

    data_buf_1_address0 <= zext_ln30_2_fu_294_p1(4 - 1 downto 0);
    data_buf_1_address1 <= zext_ln30_fu_279_p1(4 - 1 downto 0);

    data_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_1_ce0 <= ap_const_logic_1;
        else 
            data_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_1_ce1 <= ap_const_logic_1;
        else 
            data_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_2_address0 <= zext_ln30_2_fu_294_p1(4 - 1 downto 0);
    data_buf_2_address1 <= zext_ln30_fu_279_p1(4 - 1 downto 0);

    data_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_2_ce0 <= ap_const_logic_1;
        else 
            data_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_2_ce1 <= ap_const_logic_1;
        else 
            data_buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_3_address0 <= zext_ln30_2_fu_294_p1(4 - 1 downto 0);
    data_buf_3_address1 <= zext_ln30_fu_279_p1(4 - 1 downto 0);

    data_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_3_ce0 <= ap_const_logic_1;
        else 
            data_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_3_ce1 <= ap_const_logic_1;
        else 
            data_buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_4_address0 <= zext_ln30_2_fu_294_p1(4 - 1 downto 0);
    data_buf_4_address1 <= zext_ln30_fu_279_p1(4 - 1 downto 0);

    data_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_4_ce0 <= ap_const_logic_1;
        else 
            data_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_4_ce1 <= ap_const_logic_1;
        else 
            data_buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_address0 <= zext_ln30_2_fu_294_p1(4 - 1 downto 0);
    data_buf_address1 <= zext_ln30_fu_279_p1(4 - 1 downto 0);

    data_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_ce0 <= ap_const_logic_1;
        else 
            data_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_buf_ce1 <= ap_const_logic_1;
        else 
            data_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    
    data_fu_308_p4_proc : process(data_buf_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable data_fu_308_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := data_buf_q1;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for data_fu_308_p4_i in 0 to 16-1 loop
                v0_cpy(data_fu_308_p4_i) := data_buf_q1(16-1-data_fu_308_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        data_fu_308_p4 <= resvalue(16-1 downto 0);
    end process;

    icmp_ln25_fu_259_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_5) else "0";
    m_axi_out_r_ARADDR <= ap_const_lv64_0;
    m_axi_out_r_ARBURST <= ap_const_lv2_0;
    m_axi_out_r_ARCACHE <= ap_const_lv4_0;
    m_axi_out_r_ARID <= ap_const_lv1_0;
    m_axi_out_r_ARLEN <= ap_const_lv32_0;
    m_axi_out_r_ARLOCK <= ap_const_lv2_0;
    m_axi_out_r_ARPROT <= ap_const_lv3_0;
    m_axi_out_r_ARQOS <= ap_const_lv4_0;
    m_axi_out_r_ARREGION <= ap_const_lv4_0;
    m_axi_out_r_ARSIZE <= ap_const_lv3_0;
    m_axi_out_r_ARUSER <= ap_const_lv1_0;
    m_axi_out_r_ARVALID <= ap_const_logic_0;
    m_axi_out_r_AWADDR <= ap_const_lv64_0;
    m_axi_out_r_AWBURST <= ap_const_lv2_0;
    m_axi_out_r_AWCACHE <= ap_const_lv4_0;
    m_axi_out_r_AWID <= ap_const_lv1_0;
    m_axi_out_r_AWLEN <= ap_const_lv32_0;
    m_axi_out_r_AWLOCK <= ap_const_lv2_0;
    m_axi_out_r_AWPROT <= ap_const_lv3_0;
    m_axi_out_r_AWQOS <= ap_const_lv4_0;
    m_axi_out_r_AWREGION <= ap_const_lv4_0;
    m_axi_out_r_AWSIZE <= ap_const_lv3_0;
    m_axi_out_r_AWUSER <= ap_const_lv1_0;
    m_axi_out_r_AWVALID <= ap_const_logic_0;
    m_axi_out_r_BREADY <= ap_const_logic_0;
    m_axi_out_r_RREADY <= ap_const_logic_0;
    m_axi_out_r_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_9_fu_415_p5),256));
    m_axi_out_r_WID <= ap_const_lv1_0;
    m_axi_out_r_WLAST <= ap_const_logic_0;
    m_axi_out_r_WSTRB <= ap_const_lv32_FFFFF;
    m_axi_out_r_WUSER <= ap_const_lv1_0;

    m_axi_out_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_out_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln30_fu_288_p2 <= (shl_ln1_fu_271_p3 or ap_const_lv4_1);

    out_r_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_out_r_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_blk_n_W <= m_axi_out_r_WREADY;
        else 
            out_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln1_fu_271_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv1_0);
    zext_ln30_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_reg_497),160));
    zext_ln30_2_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_288_p2),64));
    zext_ln30_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_271_p3),64));
end behav;
