-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_9_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln9 : IN STD_LOGIC_VECTOR (58 downto 0);
    data_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_ce0 : OUT STD_LOGIC;
    data_buf_we0 : OUT STD_LOGIC;
    data_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_ce1 : OUT STD_LOGIC;
    data_buf_we1 : OUT STD_LOGIC;
    data_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_1_ce0 : OUT STD_LOGIC;
    data_buf_1_we0 : OUT STD_LOGIC;
    data_buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_1_ce1 : OUT STD_LOGIC;
    data_buf_1_we1 : OUT STD_LOGIC;
    data_buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_2_ce0 : OUT STD_LOGIC;
    data_buf_2_we0 : OUT STD_LOGIC;
    data_buf_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_2_ce1 : OUT STD_LOGIC;
    data_buf_2_we1 : OUT STD_LOGIC;
    data_buf_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_3_ce0 : OUT STD_LOGIC;
    data_buf_3_we0 : OUT STD_LOGIC;
    data_buf_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_3_ce1 : OUT STD_LOGIC;
    data_buf_3_we1 : OUT STD_LOGIC;
    data_buf_3_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_4_ce0 : OUT STD_LOGIC;
    data_buf_4_we0 : OUT STD_LOGIC;
    data_buf_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_buf_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_buf_4_ce1 : OUT STD_LOGIC;
    data_buf_4_we1 : OUT STD_LOGIC;
    data_buf_4_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mem_streaming_mem_streaming_Pipeline_VITIS_LOOP_9_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln9_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_418 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_275_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_285_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_295_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_305_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_315_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_447 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_325_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_335_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_345_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_462 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_355_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_467 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_472 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln14_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln9_fu_258_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln14_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mem_streaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mem_streaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln9_fu_252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_100 <= add_ln9_fu_258_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_1_reg_418 <= ap_sig_allocacmp_i_1;
                i_1_reg_418_pp0_iter1_reg <= i_1_reg_418;
                tmp_1_reg_432 <= tmp_1_fu_285_p4;
                tmp_2_reg_437 <= tmp_2_fu_295_p4;
                tmp_3_reg_442 <= tmp_3_fu_305_p4;
                tmp_4_reg_447 <= tmp_4_fu_315_p4;
                tmp_5_reg_452 <= tmp_5_fu_325_p4;
                tmp_6_reg_457 <= tmp_6_fu_335_p4;
                tmp_7_reg_462 <= tmp_7_fu_345_p4;
                tmp_8_reg_467 <= tmp_8_fu_355_p4;
                tmp_9_reg_472 <= tmp_9_fu_365_p4;
                tmp_reg_427 <= tmp_fu_275_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln9_fu_258_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_in_r_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_in_r_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln9_fu_252_p2)
    begin
        if (((icmp_ln9_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_100, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_100;
        end if; 
    end process;

    data_buf_1_address0 <= zext_ln14_1_fu_397_p1(4 - 1 downto 0);
    data_buf_1_address1 <= zext_ln14_fu_382_p1(4 - 1 downto 0);

    data_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_1_ce0 <= ap_const_logic_1;
        else 
            data_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_1_ce1 <= ap_const_logic_1;
        else 
            data_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_1_d0 <= tmp_6_reg_457;
    data_buf_1_d1 <= tmp_1_reg_432;

    data_buf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_1_we0 <= ap_const_logic_1;
        else 
            data_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_1_we1 <= ap_const_logic_1;
        else 
            data_buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_2_address0 <= zext_ln14_1_fu_397_p1(4 - 1 downto 0);
    data_buf_2_address1 <= zext_ln14_fu_382_p1(4 - 1 downto 0);

    data_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_2_ce0 <= ap_const_logic_1;
        else 
            data_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_2_ce1 <= ap_const_logic_1;
        else 
            data_buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_2_d0 <= tmp_7_reg_462;
    data_buf_2_d1 <= tmp_2_reg_437;

    data_buf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_2_we0 <= ap_const_logic_1;
        else 
            data_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_2_we1 <= ap_const_logic_1;
        else 
            data_buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_3_address0 <= zext_ln14_1_fu_397_p1(4 - 1 downto 0);
    data_buf_3_address1 <= zext_ln14_fu_382_p1(4 - 1 downto 0);

    data_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_3_ce0 <= ap_const_logic_1;
        else 
            data_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_3_ce1 <= ap_const_logic_1;
        else 
            data_buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_3_d0 <= tmp_8_reg_467;
    data_buf_3_d1 <= tmp_3_reg_442;

    data_buf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_3_we0 <= ap_const_logic_1;
        else 
            data_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_3_we1 <= ap_const_logic_1;
        else 
            data_buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_4_address0 <= zext_ln14_1_fu_397_p1(4 - 1 downto 0);
    data_buf_4_address1 <= zext_ln14_fu_382_p1(4 - 1 downto 0);

    data_buf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_4_ce0 <= ap_const_logic_1;
        else 
            data_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_4_ce1 <= ap_const_logic_1;
        else 
            data_buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_4_d0 <= tmp_9_reg_472;
    data_buf_4_d1 <= tmp_4_reg_447;

    data_buf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_4_we0 <= ap_const_logic_1;
        else 
            data_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_4_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_4_we1 <= ap_const_logic_1;
        else 
            data_buf_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_address0 <= zext_ln14_1_fu_397_p1(4 - 1 downto 0);
    data_buf_address1 <= zext_ln14_fu_382_p1(4 - 1 downto 0);

    data_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_ce0 <= ap_const_logic_1;
        else 
            data_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_ce1 <= ap_const_logic_1;
        else 
            data_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_buf_d0 <= tmp_5_reg_452;
    data_buf_d1 <= tmp_reg_427;

    data_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_we0 <= ap_const_logic_1;
        else 
            data_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_buf_we1 <= ap_const_logic_1;
        else 
            data_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln9_fu_252_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";

    in_r_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_in_r_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_in_r_ARADDR <= ap_const_lv64_0;
    m_axi_in_r_ARBURST <= ap_const_lv2_0;
    m_axi_in_r_ARCACHE <= ap_const_lv4_0;
    m_axi_in_r_ARID <= ap_const_lv1_0;
    m_axi_in_r_ARLEN <= ap_const_lv32_0;
    m_axi_in_r_ARLOCK <= ap_const_lv2_0;
    m_axi_in_r_ARPROT <= ap_const_lv3_0;
    m_axi_in_r_ARQOS <= ap_const_lv4_0;
    m_axi_in_r_ARREGION <= ap_const_lv4_0;
    m_axi_in_r_ARSIZE <= ap_const_lv3_0;
    m_axi_in_r_ARUSER <= ap_const_lv1_0;
    m_axi_in_r_ARVALID <= ap_const_logic_0;
    m_axi_in_r_AWADDR <= ap_const_lv64_0;
    m_axi_in_r_AWBURST <= ap_const_lv2_0;
    m_axi_in_r_AWCACHE <= ap_const_lv4_0;
    m_axi_in_r_AWID <= ap_const_lv1_0;
    m_axi_in_r_AWLEN <= ap_const_lv32_0;
    m_axi_in_r_AWLOCK <= ap_const_lv2_0;
    m_axi_in_r_AWPROT <= ap_const_lv3_0;
    m_axi_in_r_AWQOS <= ap_const_lv4_0;
    m_axi_in_r_AWREGION <= ap_const_lv4_0;
    m_axi_in_r_AWSIZE <= ap_const_lv3_0;
    m_axi_in_r_AWUSER <= ap_const_lv1_0;
    m_axi_in_r_AWVALID <= ap_const_logic_0;
    m_axi_in_r_BREADY <= ap_const_logic_0;

    m_axi_in_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_in_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_WDATA <= ap_const_lv256_lc_1;
    m_axi_in_r_WID <= ap_const_lv1_0;
    m_axi_in_r_WLAST <= ap_const_logic_0;
    m_axi_in_r_WSTRB <= ap_const_lv32_0;
    m_axi_in_r_WUSER <= ap_const_lv1_0;
    m_axi_in_r_WVALID <= ap_const_logic_0;
    or_ln14_fu_391_p2 <= (shl_ln_fu_375_p3 or ap_const_lv4_1);
    shl_ln_fu_375_p3 <= (i_1_reg_418_pp0_iter1_reg & ap_const_lv1_0);
    
    tmp_1_fu_285_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_1_fu_285_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_1F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_10(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_10(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_1F(8-1 downto 0)));
            for tmp_1_fu_285_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_1_fu_285_p4_i) := m_axi_in_r_RDATA(256-1-tmp_1_fu_285_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_285_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_2_fu_295_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_2_fu_295_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_2F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_20(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_20(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_2F(8-1 downto 0)));
            for tmp_2_fu_295_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_2_fu_295_p4_i) := m_axi_in_r_RDATA(256-1-tmp_2_fu_295_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_295_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_3_fu_305_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_3_fu_305_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_3F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_30(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_30(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_3F(8-1 downto 0)));
            for tmp_3_fu_305_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_3_fu_305_p4_i) := m_axi_in_r_RDATA(256-1-tmp_3_fu_305_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_305_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_4_fu_315_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_4_fu_315_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_4F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_40(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_40(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_4F(8-1 downto 0)));
            for tmp_4_fu_315_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_4_fu_315_p4_i) := m_axi_in_r_RDATA(256-1-tmp_4_fu_315_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_315_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_5_fu_325_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_5_fu_325_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_5F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_50(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_50(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_5F(8-1 downto 0)));
            for tmp_5_fu_325_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_5_fu_325_p4_i) := m_axi_in_r_RDATA(256-1-tmp_5_fu_325_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_325_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_6_fu_335_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_6_fu_335_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_6F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_60(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_60(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_6F(8-1 downto 0)));
            for tmp_6_fu_335_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_6_fu_335_p4_i) := m_axi_in_r_RDATA(256-1-tmp_6_fu_335_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_335_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_7_fu_345_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_7_fu_345_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_7F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_70(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_70(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_7F(8-1 downto 0)));
            for tmp_7_fu_345_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_7_fu_345_p4_i) := m_axi_in_r_RDATA(256-1-tmp_7_fu_345_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_345_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_8_fu_355_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_8_fu_355_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_8F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_80(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_80(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_8F(8-1 downto 0)));
            for tmp_8_fu_355_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_8_fu_355_p4_i) := m_axi_in_r_RDATA(256-1-tmp_8_fu_355_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_355_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_9_fu_365_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_9_fu_365_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_90(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_90(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_9_fu_365_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_9_fu_365_p4_i) := m_axi_in_r_RDATA(256-1-tmp_9_fu_365_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_365_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_fu_275_p4_proc : process(m_axi_in_r_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_fu_275_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := m_axi_in_r_RDATA;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_F(8-1 downto 0)));
            for tmp_fu_275_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_fu_275_p4_i) := m_axi_in_r_RDATA(256-1-tmp_fu_275_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_275_p4 <= resvalue(16-1 downto 0);
    end process;

    zext_ln14_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_391_p2),64));
    zext_ln14_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_375_p3),64));
end behav;
